Array:
const numbers = [2,4,6,8,10];
const doubled = numbers.map((number) => <li>{number} </li>)
                            
const ele = <ul> {doubled} </ul>

ReactDOM.render(ele,
document.getElementById('root')
);

---------------

Simple Hello using Component:

function Welcome(props){
 return <h1> Hello All !</h1>
};

//const element = <Welcome />
      
 ReactDOM.render(<Welcome/>, document.getElementById('root'));

-------------
Display Time :
function DateandTime(props){
  return (
  <div>
      <h1> Its {new Date().toLocaleTimeString()} </h1>
      <h2> Great ! </h2>
      </div>)
}

ReactDOM.render(<DateandTime />,
document.getElementById('root')
);

----------Using Components:

function getGreeting(user){
  if(user){
    return <h1> Hello, {formatName(user)} ! </h1>;
  }
  return <h1> Hello, Stranger </h1>;
  }

function formatName(props){
  return <h1> Shweta </h1>;
}
ReactDOM.render(getGreeting,
document.getElementById('root')
);
-----------------
Using Props:
function Welcome(props){
 return <h1> Hello , {props.name} !</h1>
};

//const element = <Welcome />
      
 ReactDOM.render(<Welcome name="Shweta"/>, document.getElementById('root'));
----------------

2 components:
function Welcome(props){
 return <h1> {props.message} , {props.name} !</h1>
};

function GreetAll(){
return (
<div className = "style">
  <Welcome name = "Harry" message="Hey"/>
  <Welcome name = " Henry" message= "Hi"/>
  <Welcome name = "Potter" message= "Hello"/>
  </div>
  ) 
}
 
      
ReactDOM.render(<GreetAll />, document.getElementById('root'));

-------------
2 components with condition:
function Welcome(props){
 return <h1> Welcome ! {props.name}</h1>
};

function SignUp(props){
  return <h1> Sign Up! {props.name}</h1>
}
function Greeting(props)
{
  const isLoggedIn = props.isLoggedIn ;
  const name = props.name ;
  if(isLoggedIn == true)
    {
     return  <Welcome name={name}/>
    }
       return <SignUp name={name} />
} 
ReactDOM.render(Greeting isLoggedIn = {true} name = "Shweta", document.getElementById('root'));

-----------
Ticking Clock:

class Clock extends React.Component {
  constructor(props)
  {
    super(props);
    this.state = {date : new Date()};
    console.log("invoked..");
  }
    componentWillMount(){
      console.log("will mount");
    }
    
    componentDidMount(){
      console.log("didmount");
      setInterval(()=> this.tick(), 1000);
    }
  
    tick(){
      this.timeId = this.setState({date:new Date()})
    }
    
  componentWillUnmount(){
      clearInterval(this.timeId);
  }
    render() {
        return (
          <h1>Is is {this.state.date.toLocaleTimeString()}</h1>
          );
    }
}


 ReactDOM.render(<Clock/>, document.getElementById('root'));
-------------
Action/Event Handler
function ActionLink(){
  function handleClick(){
  //  e.preventDefault();
    console.log("Link was clicked");
  }
  return(
    <a href ="#" onClick={handleClick}> 
      Click me </a>
      );
}       
      
      
 ReactDOM.render(<ActionLink/>, document.getElementById('root'));
            
-----------------
Button click with isToggle
class Toggle extends React.Component {
  constructor(props){
    super(props);
    this.state = {isToggleOn : true};
    
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick(){
    this.setState(prevState => ({
      isToggleOn : !prevState.isToggleOn
    }));
  }

render(){
  return (
  <button onClick={this.handleClick}>
      {this.state.isToggleOn ? 'ON' : 'OFF'}
      </button>
  );
}
}
ReactDOM.render(<Toggle/>, document.getElementById('root'));

-------------------------------
Event Handler:
class TextAreaForm extends React.Component {
  constructor(props){
    super(props);
    this.state = {
      value : "hello" };
    
    this.handleChange  = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
    }
  
  handleChange(event){
    this.setState({value :event.target.value})
  }
  
  handleSubmit(){
    alert('submission done for' + this.state.value);
    event = preventDefault();
  }
  
render(){
  return (
  <form onSubmit={this.handleSubmit}>
      <label>
        Name 
      <textArea value={this.state.value} onChange={this.handleChange}/>
        </label>
      <input type = "submit" value="submit" />
      </form>
        
  );
}
}
ReactDOM.render(<TextAreaForm/>, document.getElementById('root'));
--------------------
Multiple Event Handlers:
class Reservation extends React.Component{
  constructor(props){
    super(props);
    this.state = {
      isGoing : true,
      numberOfGuests : 2
    };
  
  this.handleInputChange = this.handleInputChange.bind(this);
  }
handleInputChange(event){
  const target = event.target;
  const value =  target.type === 'checkbox'? 
  target.check : target.value;
  
  const name=  target.name;
  this.setState({[name] : value});
  
  console.log('Changed' + name);
}
  render(){
    return (
      <form>
        <label>
          Is Going :
          <input name = "isGoing" type="checkbox" checked = {this.state.isGoing} onChange = {this.handleInputChange} />
        </label>
         <br />
        <br />
        <label>
          Number of Guests :
          <input name="numberOfGuests" type="number" value ={this.state.numberOfGuests} onChange = {this.handleInputChange} />
        </label>
        <br />
        </form>
  );
  }
  }



ReactDOM.render(<Reservation/>, document.getElementById('root'));
------------------------------------

Filtering:
const Student = (props) => <li>{props.name}</li>;

class App extends React.Component {
  
  constructor (props) {
    super(props);
    
    this.state = {
      fruits:  ['Apple','Brocilli','Banana','Cinnamon','Cider','Chicken','Fish','Grapes'],
      filter: null
    };
  }
  
  updateSearch (inputValue) {
    let filter = this.state.filter;
    
    this.setState({
      filter: inputValue
    });
  }
  
  render () {
    return (
      <div>
        <h1>Food Filter</h1>
        <FruitsFilter updateSearch={this.updateSearch.bind(this)} searchText={this.state.filter} />
        <StudentList filter={this.state.filter} fruits={this.state.fruits}></StudentList>
      </div>
    );
  }
}

class FruitsFilter extends React.Component {
  
  handleChange (event) {
    this.props.updateSearch(event.target.value);
  }
  
  render () {
    return (
      <input type="text" placeholder="Filter list" className="input-search" onChange={this.handleChange.bind(this)} value={this.props.searchText} />
    )
  }
}
class StudentList extends React.Component {
  
  filter (fruits) {
    if (!this.props.filter) {
      return fruits
    }
    return fruits.filter((student) => student.toLowerCase().indexOf(this.props.filter.toLowerCase()) >= 0)
  }
  render () {
    return (
        <ul>   
          {   this.filter(this.props.fruits)
              .map((student) => <Student name={student}></Student>)}
        </ul>
    )
  }
};

ReactDOM.render(<App />, document.getElementById('root'));

